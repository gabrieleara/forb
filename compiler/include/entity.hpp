#include <utility>

//
// Created by gabriele on 16/11/18.
//

#ifndef FORBCC_ENTITY_H
#define FORBCC_ENTITY_H

#include <string>
#include <memory>

namespace forbcc {
    // Forward declarations
    class code_ostream;

    /// Any code entity that should be generated by the compiler: namespaces, classes, structures, methods, variables.
    class entity {

        /* *********************************************** ATTRIBUTES *********************************************** */
    private:
        /// Pointer to the entity containing the current one.
        std::shared_ptr<entity> _parent;

        /// Name of the entity.
        std::string _name;

        /* ********************************************** CONSTRUCTORS ********************************************** */
    public:
        /// Constructs an empty entity, used to preallocate entity variables (like in arrays)
        /// and to later use the assignment operator to overwrite its content
        entity() : _parent(nullptr), _name("") {};

        /// Constructs an entity within a given parent
        entity(const std::shared_ptr<entity> &parent, const std::string &name)
                : _parent(parent),
                  _name(name) {};

        /**************************************************************************************************************/

    public:
        /// Does nothing because the destructor of the shared_ptr handles all the stuff
        /// It's necessary for the destructor to be virtual because share_ptrs to subclasses shall be able
        /// to correctly destruct objects of the subclasses. Also subclasses shall have virtual destructors
        virtual ~entity() = default;

        /// This class supports moving
        entity(entity &&) = default;

        /// This class supports moving
        entity &operator=(entity &&) = default;

        /// This class supports copying
        entity(const entity &) = default;

        /// This class supports copying
        entity &operator=(const entity &) = default;

        /**************************************************************************************************************/

    public:
        /// Returns the parent of the given entity.
        std::shared_ptr<entity> parent() const {
            return _parent;
        };

        /// Returns the name of the given entity.
        std::string name() const {
            return _name;
        };

        /// Prints the declaration of the given entity, if required.
        virtual void print_declaration(code_ostream &out) const = 0;

        /// Prints the definition of the given entity, if required.
        virtual void print_definition(code_ostream &out) const = 0;

        /// Returns the codename of the given entity, which is the name of the entity as seen from the global scope.
        /// This means that it is the codename of the parent entity followed by :: operator and the name of the given
        /// entity.
        virtual std::string codename() const {
            std::string parent_name = (_parent != nullptr) ? _parent->codename() : "";

            return (parent_name.length()) ? parent_name + "::" + _name : _name;
        };
    };
}


#endif //FORBCC_ENTITY_H
