//
// Created by gabriele on 04/11/18.
//

#ifndef LIBFORB_BASE_SKELETON_HPP
#define LIBFORB_BASE_SKELETON_HPP

#include <mutex>
#include <thread>
#include <vector>

#include <forb/stream/socket.hpp>


namespace forb {

    /// The class from which any automatically generated skeleton will inherit.
    class base_skeleton {
        /* ************************************* ALIASES AND STATIC ATTRIBUTES ************************************** */
    private:
        using thread_list_t = std::vector<std::thread>;

        /* *********************************************** ATTRIBUTES *********************************************** */
    private:
        /// The port number that will be used to accept incoming connection requests.
        int _port = 0;

        /// The size of the accepting queue.
        int _queue_size = 0;

        /// The thread that will accept incoming call requests.
        std::thread _server_thread;

        /// The socket that will be used to accept incoming connection requests.
        forb::streams::socket _incoming_calls;

        /* ********************************************** CONSTRUCTORS ********************************************** */
    public:
        /// Constructs a new skeleton object associated with the given port.
        /// The second argument is optional and it's used to change the
        /// default queue size for the server socket.
        explicit base_skeleton(int port, int queue_size = 10) : _port(port), _queue_size(queue_size) {};

        /**************************************************************************************************************/

        /// Virtual destructor.
        virtual ~base_skeleton() = default;

        /// This class does not support copy construction.
        base_skeleton(const base_skeleton &other) = delete;

        /// This class does not support copy assignment.
        base_skeleton &operator=(const base_skeleton &other) = delete;

        /// This class supports move construction.
        base_skeleton(base_skeleton &&other) noexcept = default;

        /// This class supports move assignment.
        base_skeleton &operator=(base_skeleton &&other) noexcept = default;

        /**************************************************************************************************************/
    protected:
        /// The body of the server thread, which will block on accept calls and spawn other threads,
        /// one for each new request.
        /// The first argument is a pointer to the actual implementation of the base_skeleton class.
        static void listen_thread_body(base_skeleton *impl);

        /// The body of the threads which will serve each call request.
        /// One thread will be spawned for each incoming connection and it will be used to serve multiple request
        /// calls within the same connection, until the connection is closed.
        static void call_thread_body(base_skeleton *impl, forb::streams::socket call_socket);

        /**************************************************************************************************************/
    public:
        /// The object will spawn a new thread ans start accepting connection requests.
        void start_server();

        /// Joins the server thread, waiting for it to terminate, which happens only in
        /// case of an error within the listening thread.
        /// NOTICE: this function is not safe in the sense that some connection threads may still be
        /// around when this function terminates.
        void join_server();

    protected:
        /// Virtual method that implementations shall define to actually serve a request call.
        /// Skeletons defining this method will be automatically generated by the FORB IDL compiler.
        virtual void execute_call(call_id_t code,
                                  forb::streams::stream *callstream,
                                  forb::streams::stream *datastream) = 0;

    private:
        /// Method called when the listening thread wants to accept a new connection request.
        void accept_connection();
    };
}


#endif //LIBFORB_BASE_SKELETON_HPP
